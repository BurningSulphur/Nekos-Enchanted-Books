buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven/' }

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
    }
}

plugins {
    id 'org.spongepowered.mixin' version '[0.7,0.8)' apply false
    id 'org.parchmentmc.librarian.forgegradle' version '1.+' apply false
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'

ext.config = parseConfig(file('../build.properties'))
ext.customConfig = parseConfig(file('build.properties'))
ext.config.MINECRAFT_VERSION = customConfig.MINECRAFT_VERSION
ext.config.FORGE_VERSION = customConfig.FORGE_VERSION
ext.config.MAPPINGS_CHANNEL = customConfig.MAPPINGS_CHANNEL
ext.config.MAPPINGS_VERSION = customConfig.MAPPINGS_VERSION
ext.config.JAVA_LANG_VERSION = customConfig.JAVA_LANG_VERSION
ext.config.MIXIN_VERSION = customConfig.MIXIN_VERSION

project.version = config.VERSION
project.group = "${config.GROUP}.${config.ARTIFACT}"
project.archivesBaseName = "${config.ARCHIVES_BASE_NAME}-${config.MINECRAFT_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(config.JAVA_LANG_VERSION)

minecraft {
    mappings channel: config.MAPPINGS_CHANNEL, version: config.MAPPINGS_VERSION

    runs {
        client {
            workingDirectory project.file('run')
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                nebs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                nebs {
                    source sourceSets.main
                }
            }
        }

        data {
            forceExit false
            workingDirectory project.file('run')
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            args '--mod', 'nebs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('../common/main/resources/')
            mods {
                nebs {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", "src/generated/resources", "../common/main/resources"]
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.MINECRAFT_VERSION}-${config.FORGE_VERSION}"

    annotationProcessor "org.spongepowered:mixin:${config.MIXIN_VERSION}:processor"
}

mixin {
    add sourceSets.main, "META-INF/mixin/nebs.refmap.json"
    config 'META-INF/mixin/nebs.mixins.json'

    debug.export = true
}

jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
            'Specification-Title'   : config.TITLE,
            'Specification-Vendor'  : config.AUTHOR,
            'Specification-Version' : '1',
            'Implementation-Title'  : config.TITLE,
            'Implementation-Version': config.VERSION,
            'Implementation-Vendor' : config.AUTHOR
        ])
    }
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: ['**/*.json', '**/*.mcmeta']).each {
            try {
                it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
            } catch (Exception e) {
                project.logger.error("Failed to minify file '${it.path}'.")
                throw e
            }
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

tasks.build.dependsOn sourcesJar

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

idea.module { downloadJavadoc = downloadSources = true }
